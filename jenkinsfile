//  Archivo Jenkinsfile para api-template
// Comment
//  by: Julian

def PROJECT_ID = "jenkins-servinformacion"
def imageTag = "gcr.io/${PROJECT_ID}/${JOB_NAME}:${BUILD_NUMBER}".replaceAll("%2","/").toLowerCase();

pipeline {
  options {
      timeout(time: 20, unit: 'MINUTES')
  }
  agent {
    kubernetes {
      defaultContainer 'jnlp'
      yaml """
apiversion: v1
kind: Pod
metadata:
  labels:
    component: ci
spec:
  volumes:  
  - name: dockersock
    hostPath:
      path: "/var/run/docker.sock"
  - name: docker
    hostPath:
      path: "/usr/bin/docker"
  - name: google-cloud-key
    secret:
      secretName: token-jenk
  containers:
  - name: node
    image: node:14.17.6
    command:
    - cat
    tty: true  
  - name: gcloud
    image: gcr.io/cloud-builders/gcloud
    volumeMounts:
    - name: google-cloud-key
      readOnly: true
      mountPath: "/var/secrets/google"
    env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: /var/secrets/google/key.json
    - name: docker
      mountPath: "/usr/bin/docker"
    - name: dockersock
      mountPath: "/var/run/docker.sock"
    command:
    - cat
    env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: /var/secrets/google/key.json
    tty: true
  - name: docker
    image: docker:18.09
    volumeMounts:
    - name: google-cloud-key
      readOnly: true
      mountPath: "/var/secrets/google"
    - name: docker
      mountPath: "/usr/bin/docker"
    - name: dockersock
      mountPath: "/var/run/docker.sock"
    command:
    - cat
    env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: /var/secrets/google/key.json
    tty: true
"""
    }
  }
  stages {
    stage('Initialize') {
      steps {
        checkout([$class: 'GitSCM', branches: [[name: '${BRANCH_NAME}']], extensions: [], userRemoteConfigs: [[credentialsId: 'JenkinsKey', url: 'git@github.com:julian1604/clase3.git']]])
        container('gcloud') {
          sh 'gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS'
          sh "more README.md"
        }
      }
    }
    stage('node') {
      steps {
        container('node') {
          sh "yarn install"
        }
      }
    }
    stage('Build-Image-feature-develop'){
      when {
            expression { BRANCH_NAME ==~ /refs\/heads\/(feature.*)/ }
           }
      steps {
        container('gcloud') {
          echo 'Estamos desplegando en la rama FEATURE'
        }
      }
    }
    stage('Build-Image-release-staging'){
      when {
            expression { BRANCH_NAME ==~ /refs\/heads\/(release.*)/ }
           } 
      steps {
        container('gcloud') {
          echo 'Estamos desplegando en la rama RELEASE'
        }
      }
    } 
    stage('Build-Image-prod'){
      when {
            expression { BRANCH_NAME ==~ /refs\/heads\/(main|master)/ }
           }     
      steps {
        container('gcloud') {
          echo 'Estamos desplegando en la rama MAIN para PROD'
        }
      }
    }
    stage('Build-Image'){
      steps {
        container('docker') {
          sh "docker build --tag=${imageTag} ."
          sh "printenv"
        }
      }
    }
    stage('Publish-Image'){
      steps {
        container('docker') {
          sh "cat /var/secrets/google/key.json  | docker login -u _json_key --password-stdin gcr.io"
          sh "docker push ${imageTag}"
        }
      }
    }

    stage('Deploy develop') {
      // Developer Branches
     when {
            expression { BRANCH_NAME ==~ /refs\/heads\/(feature.*)/ }
     }
      steps {
        container('gcloud') {
          echo 'develop'
          sh 'gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS'
          sh "gcloud config set project ${PROJECT_ID}"
          sh "gcloud container clusters get-credentials jenkins-cd --zone us-central1-c --project jenkins-servinformacion"
          sh "sed -i.bak 's#{imageTag}#${imageTag}#' k8s/develop/deployment.yaml"
          sh "cat k8s/develop/deployment.yaml"
          sh "kubectl apply -f k8s/develop/deployment.yaml"
          echo 'desplegando'
          echo 'algo'
        }
      }
    }
    stage('Deploy Staging') {
      // Developer Branches
      when {
            expression { BRANCH_NAME ==~ /refs\/heads\/(release.*)/ }
      }
      steps {
        container('gcloud') {
          echo 'staging'
          sh 'gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS'
          sh "gcloud config set project ${PROJECT_ID}"
          sh "gcloud container clusters get-credentials jenkins-cd --zone us-central1-c --project jenkins-servinformacion"
          sh "sed -i.bak 's#{imageTag}#${imageTag}#' k8s/staging/deployment.yaml"
          sh "cat k8s/staging/deployment.yaml"
          sh "kubectl apply -f k8s/staging/deployment.yaml"
          echo 'desplegando'
          echo 'algo'
        }
      }
    }
//    stage ('Aprobacion Produccion') {
//      when { branch 'main' }
//      steps {
 //       timeout(time:2, unit:'DAYS'){
   //         input message: 'Aprueba Despliegue Ambiente Produccion?',
     //       submitter: 'DevOps'
     //   }
     // }
  //  }
    stage ('Deploy Produccion') {
    when {
            expression { BRANCH_NAME ==~ /refs\/heads\/(main|master)/ }
    }
      steps {
        container('gcloud') {
          echo 'produccion'
          sh 'gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS'
          sh "gcloud config set project ${PROJECT_ID}"
          sh "gcloud container clusters get-credentials jenkins-cd --zone us-central1-c --project jenkins-servinformacion"
          sh "sed -i.bak 's#{imageTag}#${imageTag}#' k8s/produccion/deployment.yaml"
          sh "cat k8s/produccion/deployment.yaml"
          sh "kubectl apply -f k8s/produccion/deployment.yaml"
          echo 'desplegando'
          echo 'algo'
        }
      }
    }
  }
  post {
    always {
      echo 'Pipeline Finalizado'
    }
    aborted{
      echo 'El Pipeline ha sido cancelado'
    }
    failure {
      echo 'Pipeline Fallo'
    }
    success {
      echo 'Pipeline Exitoso!!'
    }
  }
}
